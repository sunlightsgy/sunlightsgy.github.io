<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[sunlight's blog]]></title>
  <subtitle><![CDATA[Free Writing]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://sunlightsgy.github.io/"/>
  <updated>2017-03-05T02:20:42.000Z</updated>
  <id>https://sunlightsgy.github.io/</id>
  
  <author>
    <name><![CDATA[sunlightsgy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[CSAPP Bomblab 解题报告]]></title>
    <link href="https://sunlightsgy.github.io/2017/03/05/CSAPP-Bomblab-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>https://sunlightsgy.github.io/2017/03/05/CSAPP-Bomblab-解题报告/</id>
    <published>2017-03-05T02:17:38.000Z</published>
    <updated>2017-03-05T02:20:42.000Z</updated>
    <content type="html"><![CDATA[<p>这次实验其实就是让我们对课上学习的汇编代码进行熟悉，比如堆栈的使用，函数的传参。一共有六个关卡和一个隐藏关卡，每一个关卡都需要我们进行一行输入，如果输入的数字或者字符串满足一定的要求，就能跳过<code>callq  0x4016a8 &lt;explode_bomb&gt;</code>这一个导致“炸弹爆炸”的调用，进行下一个阶段。当六个阶段解决完毕后，该题目通过。此外还有一个隐藏关，需要显式调用<code>call 0x401323 &lt;secret_phase&gt;</code>来完成。</p>
<h3 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h3><pre><code>0x0000000000400f50 &lt;+0&gt;:    sub    $0x8,%rsp
0x0000000000400f54 &lt;+4&gt;:    mov    $0x402690,%esi
0x0000000000400f59 &lt;+9&gt;:    callq  0x401418 &lt;strings_not_equal&gt;
0x0000000000400f5e &lt;+14&gt;:   test   %eax,%eax
0x0000000000400f60 &lt;+16&gt;:   je     0x400f67 &lt;phase_1+23&gt;
0x0000000000400f62 &lt;+18&gt;:   callq  0x4016a8 &lt;explode_bomb&gt;
0x0000000000400f67 &lt;+23&gt;:   add    $0x8,%rsp
0x0000000000400f6b &lt;+27&gt;:   retq   
</code></pre><p>这一关是拿来练手的，从程序中可以发现，我们需要比较输入字符串和位于内存0x402690处的字符串，如果它们是一样的，那么就能通过。用gdb调试，输入<code>x /s 0x402690</code>，就能看到其中的字符串为”I can see Russia from my house!”。输入后，通过phase_1。</p>
<h3 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h3><pre><code>0x0000000000400f6c &lt;+0&gt;:    push   %rbp
0x0000000000400f6d &lt;+1&gt;:    push   %rbx
0x0000000000400f6e &lt;+2&gt;:    sub    $0x28,%rsp
0x0000000000400f72 &lt;+6&gt;:    mov    %rsp,%rsi
0x0000000000400f75 &lt;+9&gt;:    callq  0x4016de &lt;read_six_numbers&gt;
0x0000000000400f7a &lt;+14&gt;:    cmpl   $0x1,(%rsp)
0x0000000000400f7e &lt;+18&gt;:    je     0x400fa0 &lt;phase_2+52&gt;
0x0000000000400f80 &lt;+20&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x0000000000400f85 &lt;+25&gt;:    jmp    0x400fa0 &lt;phase_2+52&gt;
0x0000000000400f87 &lt;+27&gt;:    mov    -0x4(%rbx),%eax
0x0000000000400f8a &lt;+30&gt;:    add    %eax,%eax
0x0000000000400f8c &lt;+32&gt;:    cmp    %eax,(%rbx)
0x0000000000400f8e &lt;+34&gt;:    je     0x400f95 &lt;phase_2+41&gt;
0x0000000000400f90 &lt;+36&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x0000000000400f95 &lt;+41&gt;:    add    $0x4,%rbx
0x0000000000400f99 &lt;+45&gt;:    cmp    %rbp,%rbx
0x0000000000400f9c &lt;+48&gt;:    jne    0x400f87 &lt;phase_2+27&gt;
0x0000000000400f9e &lt;+50&gt;:    jmp    0x400fac &lt;phase_2+64&gt;
0x0000000000400fa0 &lt;+52&gt;:    lea    0x4(%rsp),%rbx
0x0000000000400fa5 &lt;+57&gt;:    lea    0x18(%rsp),%rbp
0x0000000000400faa &lt;+62&gt;:    jmp    0x400f87 &lt;phase_2+27&gt;
0x0000000000400fac &lt;+64&gt;:    add    $0x28,%rsp
0x0000000000400fb0 &lt;+68&gt;:    pop    %rbx
0x0000000000400fb1 &lt;+69&gt;:    pop    %rbp
0x0000000000400fb2 &lt;+70&gt;:    retq  
</code></pre><p>可以看出，第二个程序调用了函数<code>read_six_number</code>，需要我们读入六个数，分别保存在<code>rsp</code>到<code>rsp+0x14</code>中。之后便是循环判断，可以看出是一个等比数列。先判断第一个数是不是等于1，如果是的话进行下一个数的判断，每个数都应该等于<code>%eax+%eax</code>，这里的eax就是上一个数的值。因此，可以知道本题的输入为 1 2 4 8 16 32.</p>
<h3 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h3><pre><code>0x0000000000400fb3 &lt;+0&gt;:    sub    $0x18,%rsp
0x0000000000400fb7 &lt;+4&gt;:    lea    0xc(%rsp),%r8
0x0000000000400fbc &lt;+9&gt;:    lea    0x7(%rsp),%rcx
0x0000000000400fc1 &lt;+14&gt;:    lea    0x8(%rsp),%rdx
0x0000000000400fc6 &lt;+19&gt;:    mov    $0x4026d6,%esi
0x0000000000400fcb &lt;+24&gt;:    mov    $0x0,%eax
0x0000000000400fd0 &lt;+29&gt;:    callq  0x400c70 &lt;__isoc99_sscanf@plt&gt;
0x0000000000400fd5 &lt;+34&gt;:    cmp    $0x2,%eax
0x0000000000400fd8 &lt;+37&gt;:    jg     0x400fdf &lt;phase_3+44&gt;
0x0000000000400fda &lt;+39&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x0000000000400fdf &lt;+44&gt;:    cmpl   $0x7,0x8(%rsp)
0x0000000000400fe4 &lt;+49&gt;:    ja     0x4010e6 &lt;phase_3+307&gt;
0x0000000000400fea &lt;+55&gt;:    mov    0x8(%rsp),%eax
0x0000000000400fee &lt;+59&gt;:    jmpq   *0x4026e0(,%rax,8)
0x0000000000400ff5 &lt;+66&gt;:    mov    $0x6f,%eax
0x0000000000400ffa &lt;+71&gt;:    cmpl   $0x89,0xc(%rsp)
0x0000000000401002 &lt;+79&gt;:    je     0x4010f0 &lt;phase_3+317&gt;
0x0000000000401008 &lt;+85&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x000000000040100d &lt;+90&gt;:    mov    $0x6f,%eax
0x0000000000401012 &lt;+95&gt;:    jmpq   0x4010f0 &lt;phase_3+317&gt;
0x0000000000401017 &lt;+100&gt;:    mov    $0x6d,%eax
0x000000000040101c &lt;+105&gt;:    cmpl   $0x1d6,0xc(%rsp)
0x0000000000401024 &lt;+113&gt;:    je     0x4010f0 &lt;phase_3+317&gt;
0x000000000040102a &lt;+119&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x000000000040102f &lt;+124&gt;:    mov    $0x6d,%eax
0x0000000000401034 &lt;+129&gt;:    jmpq   0x4010f0 &lt;phase_3+317&gt;
0x0000000000401039 &lt;+134&gt;:    mov    $0x6e,%eax
0x000000000040103e &lt;+139&gt;:    cmpl   $0x319,0xc(%rsp)
0x0000000000401046 &lt;+147&gt;:    je     0x4010f0 &lt;phase_3+317&gt;
0x000000000040104c &lt;+153&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x0000000000401051 &lt;+158&gt;:    mov    $0x6e,%eax
0x0000000000401056 &lt;+163&gt;:    jmpq   0x4010f0 &lt;phase_3+317&gt;
0x000000000040105b &lt;+168&gt;:    mov    $0x77,%eax
0x0000000000401060 &lt;+173&gt;:    cmpl   $0x3b8,0xc(%rsp)
0x0000000000401068 &lt;+181&gt;:    je     0x4010f0 &lt;phase_3+317&gt;
0x000000000040106e &lt;+187&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x0000000000401073 &lt;+192&gt;:    mov    $0x77,%eax
0x0000000000401078 &lt;+197&gt;:    jmp    0x4010f0 &lt;phase_3+317&gt;
0x000000000040107a &lt;+199&gt;:    mov    $0x71,%eax
0x000000000040107f &lt;+204&gt;:    cmpl   $0x1c6,0xc(%rsp)
0x0000000000401087 &lt;+212&gt;:    je     0x4010f0 &lt;phase_3+317&gt;
0x0000000000401089 &lt;+214&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x000000000040108e &lt;+219&gt;:    mov    $0x71,%eax
0x0000000000401093 &lt;+224&gt;:    jmp    0x4010f0 &lt;phase_3+317&gt;
0x0000000000401095 &lt;+226&gt;:    mov    $0x73,%eax
0x000000000040109a &lt;+231&gt;:    cmpl   $0x26e,0xc(%rsp)
0x00000000004010a2 &lt;+239&gt;:    je     0x4010f0 &lt;phase_3+317&gt;
0x00000000004010a4 &lt;+241&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x00000000004010a9 &lt;+246&gt;:    mov    $0x73,%eax
0x00000000004010ae &lt;+251&gt;:    jmp    0x4010f0 &lt;phase_3+317&gt;
0x00000000004010b0 &lt;+253&gt;:    mov    $0x79,%eax
0x00000000004010b5 &lt;+258&gt;:    cmpl   $0x26f,0xc(%rsp)
0x00000000004010bd &lt;+266&gt;:    je     0x4010f0 &lt;phase_3+317&gt;
0x00000000004010bf &lt;+268&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x00000000004010c4 &lt;+273&gt;:    mov    $0x79,%eax
0x00000000004010c9 &lt;+278&gt;:    jmp    0x4010f0 &lt;phase_3+317&gt;
0x00000000004010cb &lt;+280&gt;:    mov    $0x6e,%eax
0x00000000004010d0 &lt;+285&gt;:    cmpl   $0x96,0xc(%rsp)
0x00000000004010d8 &lt;+293&gt;:    je     0x4010f0 &lt;phase_3+317&gt;
0x00000000004010da &lt;+295&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x00000000004010df &lt;+300&gt;:    mov    $0x6e,%eax
0x00000000004010e4 &lt;+305&gt;:    jmp    0x4010f0 &lt;phase_3+317&gt;
0x00000000004010e6 &lt;+307&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x00000000004010eb &lt;+312&gt;:    mov    $0x67,%eax
0x00000000004010f0 &lt;+317&gt;:    cmp    0x7(%rsp),%al
0x00000000004010f4 &lt;+321&gt;:    je     0x4010fb &lt;phase_3+328&gt;
0x00000000004010f6 &lt;+323&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x00000000004010fb &lt;+328&gt;:    add    $0x18,%rsp
0x00000000004010ff &lt;+332&gt;:    retq
</code></pre><p>这题是一个有多个答案的题目。其输入格式为<code>%d %c %d</code>，即输入两个数字及一个字符。首先第一个输入的无符号格式不能超过7，也就是说，第一个输入可以是0~7中任意一个。而<code>jmpq   *0x4026e0(,%rax,8)</code>这条指令就会根据第一个输入的大小跳转到相应的代码片段。比如说当第一个输入等于0时，就有跳转到0x4026e0所对应的地址。用<code>x /w 0x4026e0</code>查看，发现地址为0x400ff5，再对应代码段，发现此事要让第三个参数等于0x89，也就是十进制137。再跳到317行，发现输入的字母要和eax的末两位相同，当第一个输入为0时，%eax为0x6f，故转化为字符得o。</p>
<p>所以其中一个答案就是0 o 137。</p>
<h3 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h3><pre><code>0x000000000040113e &lt;+0&gt;:     sub    $0x18,%rsp
0x0000000000401142 &lt;+4&gt;:     lea    0xc(%rsp),%rcx
0x0000000000401147 &lt;+9&gt;:     lea    0x8(%rsp),%rdx
0x000000000040114c &lt;+14&gt;:    mov    $0x402975,%esi
0x0000000000401151 &lt;+19&gt;:    mov    $0x0,%eax
0x0000000000401156 &lt;+24&gt;:    callq  0x400c70 &lt;__isoc99_sscanf@plt&gt;
0x000000000040115b &lt;+29&gt;:    cmp    $0x2,%eax
0x000000000040115e &lt;+32&gt;:    jne    0x401167 &lt;phase_4+41&gt;
0x0000000000401160 &lt;+34&gt;:    cmpl   $0xe,0x8(%rsp)
0x0000000000401165 &lt;+39&gt;:    jbe    0x40116c &lt;phase_4+46&gt;
0x0000000000401167 &lt;+41&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x000000000040116c &lt;+46&gt;:    mov    $0xe,%edx
0x0000000000401171 &lt;+51&gt;:    mov    $0x0,%esi
0x0000000000401176 &lt;+56&gt;:    mov    0x8(%rsp),%edi
0x000000000040117a &lt;+60&gt;:    callq  0x401100 &lt;func4&gt;
0x000000000040117f &lt;+65&gt;:    test   %eax,%eax
0x0000000000401181 &lt;+67&gt;:    jne    0x40118a &lt;phase_4+76&gt;
0x0000000000401183 &lt;+69&gt;:    cmpl   $0x0,0xc(%rsp)
0x0000000000401188 &lt;+74&gt;:    je     0x40118f &lt;phase_4+81&gt;
0x000000000040118a &lt;+76&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x000000000040118f &lt;+81&gt;:    add    $0x18,%rsp
0x0000000000401193 &lt;+85&gt;:    retq   
</code></pre><p>本题要求输入两个数字，且第一个数字需要小于等于14，然后经过func4函数对eax，esi和edx的值的一系列改变，最终得到调用后的eax要等于0。而第二个参数由于只有一句判断，故只要等于0即可。下面来看func4函数。</p>
<pre><code>0x0000000000401100 &lt;+0&gt;:     sub    $0x8,%rsp
0x0000000000401104 &lt;+4&gt;:     mov    %edx,%eax
0x0000000000401106 &lt;+6&gt;:     sub    %esi,%eax
0x0000000000401108 &lt;+8&gt;:     mov    %eax,%ecx
0x000000000040110a &lt;+10&gt;:    shr    $0x1f,%ecx
0x000000000040110d &lt;+13&gt;:    add    %ecx,%eax
0x000000000040110f &lt;+15&gt;:    sar    %eax
0x0000000000401111 &lt;+17&gt;:    lea    (%rax,%rsi,1),%ecx
0x0000000000401114 &lt;+20&gt;:    cmp    %edi,%ecx
0x0000000000401116 &lt;+22&gt;:    jle    0x401124 &lt;func4+36&gt;
0x0000000000401118 &lt;+24&gt;:    lea    -0x1(%rcx),%edx
0x000000000040111b &lt;+27&gt;:    callq  0x401100 &lt;func4&gt;
0x0000000000401120 &lt;+32&gt;:    add    %eax,%eax
0x0000000000401122 &lt;+34&gt;:    jmp    0x401139 &lt;func4+57&gt;
0x0000000000401124 &lt;+36&gt;:    mov    $0x0,%eax
0x0000000000401129 &lt;+41&gt;:    cmp    %edi,%ecx
0x000000000040112b &lt;+43&gt;:    jge    0x401139 &lt;func4+57&gt;
0x000000000040112d &lt;+45&gt;:    lea    0x1(%rcx),%esi
0x0000000000401130 &lt;+48&gt;:    callq  0x401100 &lt;func4&gt;
0x0000000000401135 &lt;+53&gt;:    lea    0x1(%rax,%rax,1),%eax
0x0000000000401139 &lt;+57&gt;:    add    $0x8,%rsp
0x000000000040113d &lt;+61&gt;:    retq   
</code></pre><p>可以看到，如果要让eax输出为0,那么就必须让中间的某一步eax=0。纵观整个函数，需要让<code>jle    0x401124 &lt;func4+36&gt;</code>执行一次将eax清0。这时我们发现，下面又有<code>jge    0x401139 &lt;func4+57&gt;</code>，这意味着必须esi等于0才能进行这一步。esi初始就是我们输入的第一个数。</p>
<p>所以，这题的答案是0 0。</p>
<h3 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h3><pre><code>0x0000000000401194 &lt;+0&gt;:    push   %rbx
0x0000000000401195 &lt;+1&gt;:    mov    %rdi,%rbx
0x0000000000401198 &lt;+4&gt;:    callq  0x4013fb &lt;string_length&gt;
0x000000000040119d &lt;+9&gt;:    cmp    $0x6,%eax
0x00000000004011a0 &lt;+12&gt;:    je     0x4011a7 &lt;phase_5+19&gt;
0x00000000004011a2 &lt;+14&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x00000000004011a7 &lt;+19&gt;:    mov    $0x0,%eax
0x00000000004011ac &lt;+24&gt;:    mov    $0x0,%edx
0x00000000004011b1 &lt;+29&gt;:    movzbl (%rbx,%rax,1),%ecx
0x00000000004011b5 &lt;+33&gt;:    and    $0xf,%ecx
0x00000000004011b8 &lt;+36&gt;:    add    0x402720(,%rcx,4),%edx
0x00000000004011bf &lt;+43&gt;:    add    $0x1,%rax
0x00000000004011c3 &lt;+47&gt;:    cmp    $0x6,%rax
0x00000000004011c7 &lt;+51&gt;:    jne    0x4011b1 &lt;phase_5+29&gt;
0x00000000004011c9 &lt;+53&gt;:    cmp    $0x2b,%edx
0x00000000004011cc &lt;+56&gt;:    je     0x4011d3 &lt;phase_5+63&gt;
0x00000000004011ce &lt;+58&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x00000000004011d3 &lt;+63&gt;:    pop    %rbx
0x00000000004011d4 &lt;+64&gt;:    retq   
</code></pre><p>这题要我们输入一个长度为6的字符串。之后，取出字符串中的每一个数，将它与0xf按位与得到ecx，再通过<code>edx = edx + *(4*ecx + 0x402720)</code>来获得edx，最后六个数算完等于0x2b就可以。因为作为字符输入的数字和0xf按位与后正好等于ascii码中的数字，所以只需要取该数字即可。我算出数字的对应关系是：0-0x2 1-0xa 2-0x6 3-0x1 4-0xc 5-0x10 6-0x9 7-0x3 8-0x4 9-0x7.所以取六个数，就可以取911108，算出来正好是0x2b。</p>
<h3 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h3><pre><code>0x00000000004011d5 &lt;+0&gt;:    push   %r14
0x00000000004011d7 &lt;+2&gt;:    push   %r13
0x00000000004011d9 &lt;+4&gt;:    push   %r12
0x00000000004011db &lt;+6&gt;:    push   %rbp
0x00000000004011dc &lt;+7&gt;:    push   %rbx
0x00000000004011dd &lt;+8&gt;:    sub    $0x50,%rsp
0x00000000004011e1 &lt;+12&gt;:    mov    %rsp,%r13
0x00000000004011e4 &lt;+15&gt;:    mov    %rsp,%rsi
0x00000000004011e7 &lt;+18&gt;:    callq  0x4016de &lt;read_six_numbers&gt;
0x00000000004011ec &lt;+23&gt;:    mov    %rsp,%r14
0x00000000004011ef &lt;+26&gt;:    mov    $0x0,%r12d
0x00000000004011f5 &lt;+32&gt;:    mov    %r13,%rbp
0x00000000004011f8 &lt;+35&gt;:    mov    0x0(%r13),%eax
0x00000000004011fc &lt;+39&gt;:    sub    $0x1,%eax
0x00000000004011ff &lt;+42&gt;:    cmp    $0x5,%eax
0x0000000000401202 &lt;+45&gt;:    jbe    0x401209 &lt;phase_6+52&gt;
0x0000000000401204 &lt;+47&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x0000000000401209 &lt;+52&gt;:    add    $0x1,%r12d
0x000000000040120d &lt;+56&gt;:    cmp    $0x6,%r12d
0x0000000000401211 &lt;+60&gt;:    je     0x401234 &lt;phase_6+95&gt;
0x0000000000401213 &lt;+62&gt;:    mov    %r12d,%ebx
0x0000000000401216 &lt;+65&gt;:    movslq %ebx,%rax
0x0000000000401219 &lt;+68&gt;:    mov    (%rsp,%rax,4),%eax
0x000000000040121c &lt;+71&gt;:    cmp    %eax,0x0(%rbp)
0x000000000040121f &lt;+74&gt;:    jne    0x401226 &lt;phase_6+81&gt;
0x0000000000401221 &lt;+76&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x0000000000401226 &lt;+81&gt;:    add    $0x1,%ebx
0x0000000000401229 &lt;+84&gt;:    cmp    $0x5,%ebx
0x000000000040122c &lt;+87&gt;:    jle    0x401216 &lt;phase_6+65&gt;
0x000000000040122e &lt;+89&gt;:    add    $0x4,%r13
0x0000000000401232 &lt;+93&gt;:    jmp    0x4011f5 &lt;phase_6+32&gt;
0x0000000000401234 &lt;+95&gt;:    lea    0x18(%rsp),%rsi
0x0000000000401239 &lt;+100&gt;:    mov    %r14,%rax
0x000000000040123c &lt;+103&gt;:    mov    $0x7,%ecx
0x0000000000401241 &lt;+108&gt;:    mov    %ecx,%edx
0x0000000000401243 &lt;+110&gt;:    sub    (%rax),%edx
0x0000000000401245 &lt;+112&gt;:    mov    %edx,(%rax)
0x0000000000401247 &lt;+114&gt;:    add    $0x4,%rax
0x000000000040124b &lt;+118&gt;:    cmp    %rsi,%rax
0x000000000040124e &lt;+121&gt;:    jne    0x401241 &lt;phase_6+108&gt;
0x0000000000401250 &lt;+123&gt;:    mov    $0x0,%esi
0x0000000000401255 &lt;+128&gt;:    jmp    0x401278 &lt;phase_6+163&gt;
0x0000000000401257 &lt;+130&gt;:    mov    0x8(%rdx),%rdx
0x000000000040125b &lt;+134&gt;:    add    $0x1,%eax
0x000000000040125e &lt;+137&gt;:    cmp    %ecx,%eax
0x0000000000401260 &lt;+139&gt;:    jne    0x401257 &lt;phase_6+130&gt;
0x0000000000401262 &lt;+141&gt;:    jmp    0x401269 &lt;phase_6+148&gt;
0x0000000000401264 &lt;+143&gt;:    mov    $0x604300,%edx
0x0000000000401269 &lt;+148&gt;:    mov    %rdx,0x20(%rsp,%rsi,2)
0x000000000040126e &lt;+153&gt;:    add    $0x4,%rsi
0x0000000000401272 &lt;+157&gt;:    cmp    $0x18,%rsi
0x0000000000401276 &lt;+161&gt;:    je     0x40128c &lt;phase_6+183&gt;
0x0000000000401278 &lt;+163&gt;:    mov    (%rsp,%rsi,1),%ecx
0x000000000040127b &lt;+166&gt;:    cmp    $0x1,%ecx
0x000000000040127e &lt;+169&gt;:    jle    0x401264 &lt;phase_6+143&gt;
0x0000000000401280 &lt;+171&gt;:    mov    $0x1,%eax
0x0000000000401285 &lt;+176&gt;:    mov    $0x604300,%edx
0x000000000040128a &lt;+181&gt;:    jmp    0x401257 &lt;phase_6+130&gt;
0x000000000040128c &lt;+183&gt;:    mov    0x20(%rsp),%rbx
0x0000000000401291 &lt;+188&gt;:    lea    0x28(%rsp),%rax
0x0000000000401296 &lt;+193&gt;:    lea    0x50(%rsp),%rsi
0x000000000040129b &lt;+198&gt;:    mov    %rbx,%rcx
0x000000000040129e &lt;+201&gt;:    mov    (%rax),%rdx
0x00000000004012a1 &lt;+204&gt;:    mov    %rdx,0x8(%rcx)
0x00000000004012a5 &lt;+208&gt;:    add    $0x8,%rax
0x00000000004012a9 &lt;+212&gt;:    cmp    %rsi,%rax
0x00000000004012ac &lt;+215&gt;:    je     0x4012b3 &lt;phase_6+222&gt;
0x00000000004012ae &lt;+217&gt;:    mov    %rdx,%rcx
0x00000000004012b1 &lt;+220&gt;:    jmp    0x40129e &lt;phase_6+201&gt;
0x00000000004012b3 &lt;+222&gt;:    movq   $0x0,0x8(%rdx)
0x00000000004012bb &lt;+230&gt;:    mov    $0x5,%ebp
0x00000000004012c0 &lt;+235&gt;:    mov    0x8(%rbx),%rax
0x00000000004012c4 &lt;+239&gt;:    mov    (%rax),%eax
0x00000000004012c6 &lt;+241&gt;:    cmp    %eax,(%rbx)
0x00000000004012c8 &lt;+243&gt;:    jge    0x4012cf &lt;phase_6+250&gt;
0x00000000004012ca &lt;+245&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x00000000004012cf &lt;+250&gt;:    mov    0x8(%rbx),%rbx
0x00000000004012d3 &lt;+254&gt;:    sub    $0x1,%ebp
0x00000000004012d6 &lt;+257&gt;:    jne    0x4012c0 &lt;phase_6+235&gt;
0x00000000004012d8 &lt;+259&gt;:    add    $0x50,%rsp
0x00000000004012dc &lt;+263&gt;:    pop    %rbx
0x00000000004012dd &lt;+264&gt;:    pop    %rbp
0x00000000004012de &lt;+265&gt;:    pop    %r12
0x00000000004012e0 &lt;+267&gt;:    pop    %r13
0x00000000004012e2 &lt;+269&gt;:    pop    %r14
0x00000000004012e4 &lt;+271&gt;:    retq   
</code></pre><p>第六题又是输入六个数。它有许多个分支和循环，按先后顺序来限制了这六个数的大小和相互关系。第一个分支，保证了所有的输入都在1-6之间。第二个分支，保证了这六个输入没有重复。第三个分支，将这六个数重新置为7-x。第四个分支，按照输入数值i的大小，依次把<code>0x604300+(i-1)*0x10</code>放到<code>rsp+0x20+2*i*0x4</code>中，然后比较它们对应内存数字的大小，必须是递减的顺序。根据地址所对应的值递减的规律，有4&gt;1&gt;3&gt;2&gt;5&gt;0。由于上文对每个数减一再倒置，所以事实上应该是2&gt;5&gt;3&gt;4&gt;1&gt;6。</p>
<p>所以本题答案是2 5 3 4 1 6。</p>
<h3 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a>secret_phase</h3><p>secret_phase需要在phase_refused处设置断点强制进入。</p>
<pre><code>0x0000000000401323 &lt;+0&gt;:     push   %rbx
0x0000000000401324 &lt;+1&gt;:     callq  0x401721 &lt;read_line&gt;
0x0000000000401329 &lt;+6&gt;:     mov    $0xa,%edx
0x000000000040132e &lt;+11&gt;:    mov    $0x0,%esi
0x0000000000401333 &lt;+16&gt;:    mov    %rax,%rdi
0x0000000000401336 &lt;+19&gt;:    callq  0x400c50 &lt;strtol@plt&gt;
0x000000000040133b &lt;+24&gt;:    mov    %rax,%rbx
0x000000000040133e &lt;+27&gt;:    lea    -0x1(%rax),%eax
0x0000000000401341 &lt;+30&gt;:    cmp    $0x3e8,%eax
0x0000000000401346 &lt;+35&gt;:    jbe    0x40134d &lt;secret_phase+42&gt;
0x0000000000401348 &lt;+37&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x000000000040134d &lt;+42&gt;:    mov    %ebx,%esi
0x000000000040134f &lt;+44&gt;:    mov    $0x604120,%edi
0x0000000000401354 &lt;+49&gt;:    callq  0x4012e5 &lt;fun7&gt;
0x0000000000401359 &lt;+54&gt;:    cmp    $0x3,%eax
0x000000000040135c &lt;+57&gt;:    je     0x401363 &lt;secret_phase+64&gt;
0x000000000040135e &lt;+59&gt;:    callq  0x4016a8 &lt;explode_bomb&gt;
0x0000000000401363 &lt;+64&gt;:    mov    $0x4026b0,%edi
0x0000000000401368 &lt;+69&gt;:    callq  0x400b80 &lt;puts@plt&gt;
0x000000000040136d &lt;+74&gt;:    callq  0x401847 &lt;phase_defused&gt;
0x0000000000401372 &lt;+79&gt;:    pop    %rbx
0x0000000000401373 &lt;+80&gt;:    retq   
</code></pre><p>先读入一行，转为长整型。并且这个数不能大于0x3e8。然后将这个数和地址0x604120作为参数传入func7，如果得到eax的值为3，就成功破解了炸弹。</p>
<p>下面来看func7</p>
<pre><code>0x00000000004012e5 &lt;+0&gt;:    sub    $0x8,%rsp
0x00000000004012e9 &lt;+4&gt;:    test   %rdi,%rdi
0x00000000004012ec &lt;+7&gt;:    je     0x401319 &lt;fun7+52&gt;
0x00000000004012ee &lt;+9&gt;:    mov    (%rdi),%edx
0x00000000004012f0 &lt;+11&gt;:    cmp    %esi,%edx
0x00000000004012f2 &lt;+13&gt;:    jle    0x401301 &lt;fun7+28&gt;
0x00000000004012f4 &lt;+15&gt;:    mov    0x8(%rdi),%rdi
0x00000000004012f8 &lt;+19&gt;:    callq  0x4012e5 &lt;fun7&gt;
0x00000000004012fd &lt;+24&gt;:    add    %eax,%eax
0x00000000004012ff &lt;+26&gt;:    jmp    0x40131e &lt;fun7+57&gt;
0x0000000000401301 &lt;+28&gt;:    mov    $0x0,%eax
0x0000000000401306 &lt;+33&gt;:    cmp    %esi,%edx
0x0000000000401308 &lt;+35&gt;:    je     0x40131e &lt;fun7+57&gt;
0x000000000040130a &lt;+37&gt;:    mov    0x10(%rdi),%rdi
0x000000000040130e &lt;+41&gt;:    callq  0x4012e5 &lt;fun7&gt;
0x0000000000401313 &lt;+46&gt;:    lea    0x1(%rax,%rax,1),%eax
0x0000000000401317 &lt;+50&gt;:    jmp    0x40131e &lt;fun7+57&gt;
0x0000000000401319 &lt;+52&gt;:    mov    $0xffffffff,%eax
0x000000000040131e &lt;+57&gt;:    add    $0x8,%rsp
0x0000000000401322 &lt;+61&gt;:    retq   
</code></pre><p>fun7是一个递归函数，如果第一个参数不为0，就和第二个参数比较，进行递归。我进行递归到第三层时，得到eax最终为3。而输入为107时，递归正好能进行3层，所以本题的输入就为107。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这次实验其实就是让我们对课上学习的汇编代码进行熟悉，比如堆栈的使用，函数的传参。一共有六个关卡和一个隐藏关卡，每一个关卡都需要我们进行一行输入，如果输入的数字或者字符串满足一定的要求，就能跳过<code>callq  0x4016a8 &lt;explode_bomb&gt]]>
    </summary>
    
      <category term="assembly" scheme="https://sunlightsgy.github.io/tags/assembly/"/>
    
      <category term="courses" scheme="https://sunlightsgy.github.io/categories/courses/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[My New Post]]></title>
    <link href="https://sunlightsgy.github.io/2017/03/05/My-New-Post/"/>
    <id>https://sunlightsgy.github.io/2017/03/05/My-New-Post/</id>
    <published>2017-03-04T18:28:27.000Z</published>
    <updated>2017-03-04T18:28:27.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="https://sunlightsgy.github.io/2017/03/05/hello-world/"/>
    <id>https://sunlightsgy.github.io/2017/03/05/hello-world/</id>
    <published>2017-03-04T16:33:49.000Z</published>
    <updated>2017-03-04T16:33:49.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.]]>
    </summary>
    
  </entry>
  
</feed>
