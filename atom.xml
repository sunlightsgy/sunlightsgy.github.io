<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[sunlight's blog]]></title>
  <subtitle><![CDATA[Free Writing]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://sunlightsgy.github.io/"/>
  <updated>2017-05-07T13:30:41.000Z</updated>
  <id>https://sunlightsgy.github.io/</id>
  
  <author>
    <name><![CDATA[sunlightsgy]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Python中的编码转换]]></title>
    <link href="https://sunlightsgy.github.io/2017/05/07/Python%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E8%BD%AC%E6%8D%A2/"/>
    <id>https://sunlightsgy.github.io/2017/05/07/Python中的编码转换/</id>
    <published>2017-05-07T13:05:51.000Z</published>
    <updated>2017-05-07T13:30:41.000Z</updated>
    <content type="html"><![CDATA[<p>Python是门好语言，但是它的编码转换挺坑的，每每都在编码转换中遇到问题。现在就这些问题记录一下。</p>
<p>以下针对 python3。</p>
<h2 id="十六进制-str-转-bytes"><a href="#十六进制-str-转-bytes" class="headerlink" title="十六进制 str 转 bytes"></a>十六进制 str 转 bytes</h2><p>由于遇到文件中是<code>&#39;\xe7\x9a\x84&#39;</code>这种16进制格式，如何将它转换为指定编码格式的字符串输出呢？这个 str 转 str 的问题让我头疼了好久。答案是利用<code>bytes.fromhex(str)</code>这个函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rawstr = <span class="string">'\xe7\x9a\x84'</span> 				<span class="comment"># type(str) == 'str'</span></div><div class="line">hexstr = rawstr.replace(<span class="string">'\\x'</span>,<span class="string">''</span>)		<span class="comment"># type(hexstr) == 'str'</span></div><div class="line">rawbytes = bytes.fromhex(hexstr) 	<span class="comment"># type(rawbytes) == 'bytes'</span></div><div class="line">charset = <span class="string">'utf-8'</span></div><div class="line">output = rawbytes.decode(charset)	<span class="comment"># type(output) == 'str'</span></div><div class="line">print(output)						<span class="comment"># 他们</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="str-和-bytes-互转"><a href="#str-和-bytes-互转" class="headerlink" title="str 和 bytes 互转"></a>str 和 bytes 互转</h2><p>如上所示，bytes 对象使用 decode 方法能转换成 str 对象，而 str 对象使用 encode 方法能转换成 bytes 对象。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; rawstr = <span class="string">'https://sunlightsgy.github.io/'</span></div><div class="line">&gt;&gt;&gt; <span class="built_in">type</span>(rawstr)</div><div class="line">&lt;class <span class="string">'str'</span>&gt;</div><div class="line">&gt;&gt;&gt; rawbytes = rawstr.encode(encoding=<span class="string">"utf-8"</span>)</div><div class="line">&gt;&gt;&gt; <span class="built_in">type</span>(rawbytes)</div><div class="line">&lt;class <span class="string">'bytes'</span>&gt;</div><div class="line">&gt;&gt;&gt; rawbytes</div><div class="line">b<span class="string">'https://sunlightsgy.github.io/'</span></div><div class="line">&gt;&gt;&gt; secondstr = rawbytes.decode(<span class="string">"utf-8"</span>)</div><div class="line">&gt;&gt;&gt; <span class="built_in">type</span>(secondstr)</div><div class="line">&lt;class <span class="string">'str'</span>&gt;</div><div class="line">&gt;&gt;&gt; secondstr</div><div class="line"><span class="string">'https://sunlightsgy.github.io/'</span></div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Python是门好语言，但是它的编码转换挺坑的，每每都在编码转换中遇到问题。现在就这些问题记录一下。</p>
<p>以下针对 python3。</p>
<h2 id="十六进制-str-转-bytes"><a href="#十六进制-str-转-bytes" class="headerlink" title="十六进制 str 转 bytes"></a>十六进制 str 转 bytes</h2><p>由于遇到文件中是<code>&#39;\xe7\x9a\x84&#39;</code>这种16进制格式，如何将它转换为指定编码格式的字符串输出呢？这个 str 转 str 的问题让我头疼了好久。答案是利用<code>bytes.fromhex(str)</code>这个函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rawstr = <span class="string">'\xe7\x9a\x84'</span> 				<span class="comment"># type(str) == 'str'</span></div><div class="line">hexstr = rawstr.replace(<span class="string">'\\x'</span>,<span class="string">''</span>)		<span class="comment"># type(hexstr) == 'str'</span></div><div class="line">rawbytes = bytes.fromhex(hexstr) 	<span class="comment"># type(rawbytes) == 'bytes'</span></div><div class="line">charset = <span class="string">'utf-8'</span></div><div class="line">output = rawbytes.decode(charset)	<span class="comment"># type(output) == 'str'</span></div><div class="line">print(output)						<span class="comment"># 他们</span></div></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="python" scheme="https://sunlightsgy.github.io/tags/python/"/>
    
      <category term="engineering" scheme="https://sunlightsgy.github.io/categories/engineering/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[WWW17健康计算论文选读]]></title>
    <link href="https://sunlightsgy.github.io/2017/05/02/WWW17%E5%81%A5%E5%BA%B7%E8%AE%A1%E7%AE%97%E8%AE%BA%E6%96%87%E9%80%89%E8%AF%BB/"/>
    <id>https://sunlightsgy.github.io/2017/05/02/WWW17健康计算论文选读/</id>
    <published>2017-05-02T11:24:38.000Z</published>
    <updated>2017-05-07T05:25:30.000Z</updated>
    <content type="html"><![CDATA[<p>本次 WWW2017 有一个 track 是 computational health，里面一共收了八篇 paper。由于一直在做相关的工作，所以读了一下这些论文。</p>
<a id="more"></a>
<h2 id="Cataloguing-Treatments-Discussed-and-Used-in-Online-Autism-Communities"><a href="#Cataloguing-Treatments-Discussed-and-Used-in-Online-Autism-Communities" class="headerlink" title="Cataloguing Treatments Discussed and Used in Online Autism Communities"></a>Cataloguing Treatments Discussed and Used in Online Autism Communities</h2><p>这篇论文主要的思想是，在网上有很多跟精神健康相关的社区和论坛，里面的人们会互相讨论问题和解决方法。聚焦到自闭症(Autism)这个社区来说，论坛上一般有病人(patients)和监护人(caregiver) 两种角色。这些人经常会提出一些治疗方法，但是有的被采用了，有的并没有被采用，这篇论文想要做的就是去识别那些提出并被实际使用的治疗方法，从横向和纵向上去发现这些治疗手段，并构建了一个治疗手段集。</p>
<p>原文链接<a href="http://dl.acm.org/citation.cfm?id=3052661。" target="_blank" rel="external">http://dl.acm.org/citation.cfm?id=3052661。</a></p>
<h2 id="Harnessing-the-Web-for-Population-Scale-Physiological-Sensing-A-Case-Study-of-Sleep-and-Performance"><a href="#Harnessing-the-Web-for-Population-Scale-Physiological-Sensing-A-Case-Study-of-Sleep-and-Performance" class="headerlink" title="Harnessing the Web for Population-Scale Physiological Sensing: A Case Study of Sleep and Performance"></a>Harnessing the Web for Population-Scale Physiological Sensing: A Case Study of Sleep and Performance</h2><p>人类的认知表现对创造、学习和事故预防都是非常重要的。人认知表现在一天中是变化的，而且大致24小时为周期的变化。但之前对睡眠和认知周期的研究工作都局限在于小规模的实验室中的研究，没有捕捉到现实世界复杂的环境。因此，最近研究人员聚焦于如何在自然环境中研究大规模的人类认知行为特征。这篇文章提出了目前为止最大的研究，他们利用人们进行网页搜索的行为（按键反应速度和点击交互）来衡量他们的认知水平，并让他们带上可穿戴设备来记录其睡眠时间。他们发现人们在现实生活中的认知表现不仅受到每日行为模式的影响，也受到其前一天的睡眠影响。他们结合实验室之前的研究结果和他们探索出的昼夜节律（circadian rhythms）、自我平衡的睡眠驱动力（homeostatic sleep drive）和睡眠惯性（sleep inertia）来研究睡眠和认知表现之间的关系。进一步地，他们量化了不充足的睡眠对于现实的认知表现的影响，发现如果连续两天睡眠不足六小时，接下来的六天时间会有明显的睡眠质量下降。</p>
<p>原文链接<a href="http://dl.acm.org/citation.cfm?id=3052637。" target="_blank" rel="external">http://dl.acm.org/citation.cfm?id=3052637。</a></p>
<h2 id="Forecasting-Seasonal-Inﬂuenza-Fusing-Digital-Indicators-and-a-Mechanistic-Disease-Model"><a href="#Forecasting-Seasonal-Inﬂuenza-Fusing-Digital-Indicators-and-a-Mechanistic-Disease-Model" class="headerlink" title="Forecasting Seasonal Inﬂuenza Fusing Digital Indicators and a Mechanistic Disease Model"></a>Forecasting Seasonal Inﬂuenza Fusing Digital Indicators and a Mechanistic Disease Model</h2><p>基于一个用微博数据标注地理位置的随机的空间机械模型（mechanistic model），这篇文章提出了一个季节性流感预测模型。这个工作提供了超过600个人口普查区域的空间初始状态，去预测一场流行病中最受关注的问题：峰值时刻和强度。他们比较了2014-15和2015-16两个年度他们的结果和官方的数据，发现他们的模型能够提前六周给出比较好的预测结果。这个方法的一个好处在于能够捕捉流感相关的参数，这样对于公共健康的决策有好处，而传统的统计模型就不会考虑这种疾病的动态变化。最后，这个工作使得在初始化阶段多种数据能够融合，使得工作具有扩展性。</p>
<p>原文链接<a href="http://dl.acm.org/citation.cfm?id=3052678" target="_blank" rel="external">http://dl.acm.org/citation.cfm?id=3052678</a></p>
<h2 id="Using-Participatory-Web-based-Surveillance-Data-to-Improve-Seasonal-Inﬂuenza-Forecasting-in-Italy"><a href="#Using-Participatory-Web-based-Surveillance-Data-to-Improve-Seasonal-Inﬂuenza-Forecasting-in-Italy" class="headerlink" title="Using Participatory Web-based Surveillance Data to Improve Seasonal Inﬂuenza Forecasting in Italy"></a>Using Participatory Web-based Surveillance Data to Improve Seasonal Inﬂuenza Forecasting in Italy</h2><p>又是一篇做流感监测相关的工作。传统的流感监视方法容易受到影响，包括通常会延迟一周的报告和不断修正的数字。所以，流感预测往往受限于得到新的和准确的数据的时间。另一方面，疾病监测中可用的新数据流可以帮助抓住额外的监控信号，可以作为一种补充的数据。在这篇工作中，作者研究了如何将传统的检测方法和基于网络的参与式监控数据结合，来提供实时的、更加精确的流感预测。为了达到这个目标，他们使用了两个数据集：一是传统的监控数据（从医生的报告中获得），二是从互联网上的调查问卷中来获得的数字监控数据。他们使用了一个 ARX Model 将两者融合起来，利用2012-2016这几年发生在意大利的流感来评价其预测有效性。实验结果表明，使用互联网上的数据（往往比传统数据早一星期）能够提升其预测准确率。</p>
<p>原文链接<a href="http://dl.acm.org/citation.cfm?id=3052670" target="_blank" rel="external">http://dl.acm.org/citation.cfm?id=3052670</a></p>
<h2 id="Inferring-Individual-Attributes-from-Search-Engine-Queries-and-Auxiliary-Information"><a href="#Inferring-Individual-Attributes-from-Search-Engine-Queries-and-Auxiliary-Information" class="headerlink" title="Inferring Individual Attributes from Search Engine Queries and Auxiliary Information"></a>Inferring Individual Attributes from Search Engine Queries and Auxiliary Information</h2><p>互联网数据已经成为探究人类行为不同方面的主要来源。在这种研究中，很重要的一步是找到一组有着同样特征的人。但是由于隐私的关系，很难找到这样的数据。为了方便特定领域特别是医疗领域的研究，本篇工作提出了一个算法去检测匿名用户的一些特征。利用很小的一部分标注样本和整个人群上的统计学信息，就可以预测出未标注样本的信息。这篇文章还给出了两个应用：一是他们阐释了对于其搜索模式暗示他们可能遭受着某种形式的癌症的用户该如何检测——这表明了搜索记录可以作为一些常常很晚确诊的疾病的一个检查设备。二是他们深化了其模型，根据疾病发生的次数去预测疾病的分布。</p>
<p>原文链接<a href="http://dl.acm.org/citation.cfm?id=3052629" target="_blank" rel="external">http://dl.acm.org/citation.cfm?id=3052629</a></p>
<h2 id="PhLeGrA-Graph-Analytics-in-Pharmacology-over-the-Web-of-Life-Sciences-Linked-Open-Data"><a href="#PhLeGrA-Graph-Analytics-in-Pharmacology-over-the-Web-of-Life-Sciences-Linked-Open-Data" class="headerlink" title="PhLeGrA: Graph Analytics in Pharmacology over the Web of Life Sciences Linked Open Data"></a>PhLeGrA: Graph Analytics in Pharmacology over the Web of Life Sciences Linked Open Data</h2><p>对于药理学研究来说，预测几种药物放在一起会不会发生不良反应的综合方法是很重要的。这些方法需要对生物信息进行分析和综合，需要从多种的异构的数据源来获得知识。为了处理这个问题，Semantic Web社区已经发布了一系列有联系的数据集在LSLOD云上。在这篇文章中，他们展示了一个PhLeGrA平台，用来在药理学中做关联图分析。通过联合查询，他们结合了四个数据源并提取了一个药物反应网络。我们将它表示为一个隐藏的条件随机场，一个有力的隐变量模型用来结构化输出预测结果。他们测试了他们的模型，在AUROC标准上能够大于0.75。</p>
<p>原文链接<a href="http://dl.acm.org/citation.cfm?id=3052692" target="_blank" rel="external">http://dl.acm.org/citation.cfm?id=3052692</a></p>
<h2 id="Mobile-Sensing-at-the-Service-of-Mental-Well-being-a-Large-scale-Longitudinal-Study"><a href="#Mobile-Sensing-at-the-Service-of-Mental-Well-being-a-Large-scale-Longitudinal-Study" class="headerlink" title="Mobile Sensing at the Service of Mental Well-being: a Large-scale Longitudinal Study"></a>Mobile Sensing at the Service of Mental Well-being: a Large-scale Longitudinal Study</h2><p>通过手机传感器数据来衡量精神健康水平是一个热门话题。但是，手机传感器和精神健康结合的工作，往往遭遇了广度限制和控制，也即参与人员不足的问题。这篇文章报告了他们认为是世界上规模最大的通过手机研究情绪的工作。他们设计了一款安卓 app 去收集用户自我汇报的心情等数据，并通过手机传感器去被动收集他们的运动和社交。最后大概收集了三年 18000 个用户的数据。    </p>
<p>这篇论文有三个贡献点：第一，如何利用智能手机的传感器来自动精确地确认日常行为；第二，展示了这些日常行为和用户的个性、幸福感和其他心理变量之间强烈的联系；第三，尝试利用这些行为来预测他们的心情。即使在周末，这种方法也能有70%以上的准确性。</p>
<p>原文链接<a href="http://dl.acm.org/citation.cfm?id=3052618" target="_blank" rel="external">http://dl.acm.org/citation.cfm?id=3052618</a></p>
<h2 id="Understanding-and-Discovering-Deliberate-Self-harm-Content-in-Social-Media"><a href="#Understanding-and-Discovering-Deliberate-Self-harm-Content-in-Social-Media" class="headerlink" title="Understanding and Discovering Deliberate Self-harm Content in Social Media"></a>Understanding and Discovering Deliberate Self-harm Content in Social Media</h2><p>研究表明，有自我伤害倾向的人比起在现实生活中，更容易在社交媒体上发布一些自我伤害的想法。鉴于现在庞大的社交媒体数据，有关自我伤害的内容往往很快被埋没在其他正常的内容中。为了让这些声音能被听见，我们需要能够把自我伤害的内容给检测出来。首先，这个工作使用不同的输入信号，对自我伤害倾向的社交媒体数据做了一个全面的分析。在该领域这是最大规模的分析，也发现了一些重要的结论。他们接着提出了一套框架，结合这些结论来对自我伤害行为进行检测，并最终在 flickr 数据集上进行了验证。</p>
<p>原文链接<a href="http://dl.acm.org/citation.cfm?id=3052555" target="_blank" rel="external">http://dl.acm.org/citation.cfm?id=3052555</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本次 WWW2017 有一个 track 是 computational health，里面一共收了八篇 paper。由于一直在做相关的工作，所以读了一下这些论文。</p>]]>
    
    </summary>
    
      <category term="computational health" scheme="https://sunlightsgy.github.io/tags/computational-health/"/>
    
      <category term="papers reading" scheme="https://sunlightsgy.github.io/categories/papers-reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[多模态字典学习(Multimodal Dictionary Learning)]]></title>
    <link href="https://sunlightsgy.github.io/2017/04/11/Dictionary_Learning/"/>
    <id>https://sunlightsgy.github.io/2017/04/11/Dictionary_Learning/</id>
    <published>2017-04-11T02:42:29.000Z</published>
    <updated>2017-04-11T16:49:27.000Z</updated>
    <content type="html"><![CDATA[<p>阅读论文：《Multimodal Task-Driven Dictionary Learning for Image Classiﬁcation》</p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p><strong>字典学习（Dictionary Learning）</strong>中，输入信号被<strong>字典元素（dictionary atom）</strong>的线性组合所表示。字典学习最初是用来解决单一模态的问题，但是最近的研究表明了对于多模态的输入来说，在特征层面上利用联合稀疏表征（joint sparse representation）可以达到很好的效果。这篇文章提出了一个任务导向的，也即有监督的多模态字典学习方法。在这个方法中，多模态字典和他们对应的分类器是被同时学习的。它利用了<strong>联合稀疏约束（joint sparsity constraint）</strong>来增强同构或异构数据中的联系，获得的多模态字典可以产生有识别力的<strong>隐藏特征（latent features）</strong>，可以用于二分类问题以及多分类问题。此外，这篇文章还提出了一个当前方法的扩展，使用一个 <strong>mixed joint and independent sparsity prior 约束</strong>，使得特征层面的融合变得更加灵活。这篇文章以四个应用验证了他们的方法：多模态人脸识别、多视角人脸识别、多视角动作识别和多模态生物识别。结果也证明，相比于非监督的、重构性的字典学习来说，任务导向的、有监督的学习在计算效率上更胜一筹。</p>
<a id="more"></a>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="多模态信息融合"><a href="#多模态信息融合" class="headerlink" title="多模态信息融合"></a>多模态信息融合</h3><p>采集多角度的信息，再将它们融合，往往能得到更好的识别效果。融合方法在大方向上可以分为<strong>特征融合（feature fusion）</strong>和<strong>分类器融合（classifier fusion）</strong>。特征融合方法将从不同来源提取的特征融合进单一的一个特征集中，然后用于分类；而分类器融合方法对每个来源的特征集都设计一个分类器，最后的结果由这些分类器单独的结果决策而成。在过去的研究中，分类器融合方法已经得到了很好的研究，但是特征融合研究甚少，主要是因为不同特征集之间有着诸多的不同，难以适配。一个简单的方法是将所有的特征全部放在一起，但是由于训练集有限，会导致<strong>维度灾难（curse of dimensionality）</strong>。即使我们拥有充足的训练数据，这种做法也不能捕捉不同特征源之间的关系，并且可能有很多噪声和冗余。但是有研究表明如果这些问题得到克服，那么特征融合可能大大提高分类表现。</p>
<blockquote>
<p>维度灾难是在数字图像处理中，对于已知样本数目，存在一个特征数目的最大值，当实际使用的特征数目超过这个最大值时，分类器的性能不是得到改善，而是退化。</p>
</blockquote>
<h3 id="稀疏表示分类"><a href="#稀疏表示分类" class="headerlink" title="稀疏表示分类"></a>稀疏表示分类</h3><p><strong>稀疏表示分类（Sparse representation classification）</strong>近年来也引起了研究人员的兴趣。这种方法已经被成功运用到了人脸识别，视频追踪和短时音频识别中。在稀疏表示中，输入信号被<strong>字典元素（dictionary atom）</strong>的线性组合所表示。在这种方法中，我们往往将所有训练数据放在一起，构建一个结构化的<strong>字典（dictionary）</strong>。这个方法也已经被扩展到特征层面的融合——<strong>多任务学习（multi-task learning）</strong>。在不同的稀疏约束中，<strong>联合稀疏约束（joint sparsity constraint）</strong>在多任务学习应用中展现出了良好的效果。这里面潜在的假设是：多模态的输入可以被多模态字典中的一些字典元素或者训练数据所表征，并且，得到的稀疏系数也应该和他们有同样的稀疏模式。但是，这种构建字典的方法有两个限制：1. 随着训练数据的增大，计算量的增加是非常大的；2. 这种构建方法对于各种任务来说并不是最优化的。</p>
<h3 id="字典学习"><a href="#字典学习" class="headerlink" title="字典学习"></a>字典学习</h3><p>近年来，学术界发现<strong>字典学习（Dictionary Learning）</strong>方法可以有效地克服以上字典构建的缺点。学习出的字典常常是更加小巧紧凑的，其字典元素的大小远小于训练数据量。字典学习方法分为两种：监督的和非监督的。非监督学习致力于为重构性的任务找到一个字典使得其误差最小，比如信号降噪或者图像修复。尽管非监督学习在分类问题上也有所表现，但是任务导向的监督学习能够明显取得更好的效果。对于分类任务，利用分类标签来使得字典最小化分类错误，要好于最小化重构误差。给重构误差加上一个权重，与分类错误率做一个 trade-off，对于一些问题来说会得到比较好的效果。但是有监督字典学习通常更难以取得最优化结果。</p>
<h3 id="多模态字典学习"><a href="#多模态字典学习" class="headerlink" title="多模态字典学习"></a>多模态字典学习</h3><p>现有的字典学习的最大缺陷在于只能用在单一数据来源中。在[1]中，一系列视角特有的字典和一个通用的字典被学习出来。视角特有的字典发挥了视角层面的特征效果，而通用字典捕捉了不同视角间的共同模式。它利用标注的数据学习视角特有的字典元素，但是它最小化的是重构误差，并且，它也不能用在异构的模态中。还有一系列的工作，也分别有一些不足之处。</p>
<h3 id="文章贡献"><a href="#文章贡献" class="headerlink" title="文章贡献"></a>文章贡献</h3><ul>
<li><strong>对多模态字典学习方法的形式化表达。</strong>这篇文章提出了一个多模态字典学习方法，使用了同构和异构的数据。不同模态的数据不仅在特征层面进行了融合（采用联合稀疏表征），也在决策层面进行了融合（对模态特有的分类器进行得分加权）。该方法同时学习特征和分类器，将隐藏稀疏编码作为最优化的特征，用于分类问题。一个非监督学习的方法作为本方法的副产品也被提了出来。</li>
<li><strong>双层优化问题的可微性。</strong>这个方法的最大难点在于，关于字典数，联合稀疏编码的问题是不可微的。虽然联合稀疏编码有一个不平滑的代价函数，但是从这篇文章的推导可以看出它是局部可微的，这样对应的最优化就是平滑的，可以用随机梯度下降法解出。</li>
<li><strong>灵活的特征融合。</strong>本文一个拓展是提供一个在独立稀疏表示和联合稀疏表示之间的 trade-off。</li>
<li><strong>提升了多模态分类的准确率。</strong></li>
<li><strong>提升了基于稀疏表示的分类效率。</strong></li>
</ul>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="字典学习（Dictionary-Learning）"><a href="#字典学习（Dictionary-Learning）" class="headerlink" title="字典学习（Dictionary Learning）"></a>字典学习（Dictionary Learning）</h3><p>与 PCA 方法不同，字典学习不需要强制使用正交条件，对于训练数据更加的灵活。令$\mathbf{X}=[x_1,x_2,…,x_N]\in R^{n\times N}$ 为N个训练样本的集合，字典$D\in R^{n \times d}$可以通过最小化下列经验代价函数得到<br>$$<br>g_N(D) = \frac{1}{N} \sum^{N}_{i=1}l_u(x_i,D)<br>$$<br>要满足 $D \in R^{n \times d} ||d_k||_{l_2} \leq 1$，其中$d_k$是 D 的第 k 个字典元素。非监督的 loss function 定义为</p>
<p>$$<br>l_u(x_i,D)=min_{\alpha\in R^{d}}||x-Da||^2_{l2}+\lambda_1||\alpha||_{l_1}+\lambda_2||\alpha||^2{l_2}<br>$$<br>这是稀疏编码问题的最优解，其中$\lambda_1,\lambda_2$是正则化参数。另一方面，对于经验代价，人们往往关注其期望风险，而不是其完美的最小化。[2]中提出了一个在线的算法去发现字典 D，其能够最小化下列的随机误差<br>$$<br>g(D)=E_x[l_u(x,D)],<br>$$<br>这里假设了 x 从一个有限概率分布 p(x) 中获取，而$E_x$是它的期望。这个训练得到的字典 D 就可以被用来（稀疏地）重构输入。另一个用处是拿来做特征提取，因为稀疏编码$\alpha^(x,D)$可以视作表征输入x的特征向量。于是在训练分类器的时候，我们有<br>$$<br>min_{w\in\mathscr{W}}E_{y,x}[l(y,w,\alpha(x,D))]+\frac{v}{2}||w||^2_{l_2}<br>$$<br>其中y是 ground truth 标签，w 是分类器参数，v 是一个正则化参数，l 是一个凸损失函数，度量给定$\alpha$和w时，能多好地预测 y。值得注意的是，这个是非监督的。对于有监督的版本为<br>$$<br>min_{w\in\mathscr{W},D\in\mathscr{D}}E_{y,x}[l_{su}(y,w,\alpha(x,D))]+\frac{v}{2}||w||^2_{l_2}<br>$$</p>
<h3 id="多模态联合稀疏表示（Multimodal-joint-sparse-representation）"><a href="#多模态联合稀疏表示（Multimodal-joint-sparse-representation）" class="headerlink" title="多模态联合稀疏表示（Multimodal joint sparse representation）"></a>多模态联合稀疏表示（Multimodal joint sparse representation）</h3><p>联合稀疏表示是特征融合的一个有力工具。令$S\in{1,…,S}$是有限的模态集合，$x^s$代表第 s 个模态的特征向量，$D^s$是第 s 个模态的字典。假设多模态的字典是从不同模态的训练数据中构建的，给定$x^s$，一个最优的稀疏矩阵$A$可以这样获得：<br>$$<br>argmin_{A=[\alpha^1,\alpha^2,…,\alpha^s]}\frac{1}{2}\sum_{s=1}^S||x^s-D^s\alpha^s||^2_{l_2}+\lambda||A||_{l_{12}}<br>$$<br>这篇文章采用了 ADMM 方法[3]来找到$A$。多模态联合稀疏表示展现了很好的效果，最重要的是，去除了训练数据中的冗余信息。</p>
<p>基础部分就介绍到这里，大家如果有兴趣的话，可以亲自读读这篇论文，看看他是如何把多模态稀疏表示和字典学习融合在一起的。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li>J. Zheng and Z. Jiang, “Learning view-invariant sparse representations for cross-view action recognition,” in Proc. IEEE Intel. Conf. Computer Vision (ICCV), 2013, pp. 3176–3183.</li>
<li>J. Mairal, F. Bach, J. Ponce, and G. Sapiro, “Online dictionary learning for sparse coding,” Proc. 26th Annu. Int. Conf. Mach. Learning (ICML), pp. 689–696, 2009.</li>
<li>N. Parikh and S. Boyd, “Proximal algorithms,” Foundations and Trends in Optimization, pp. 1–96, 2013.</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>阅读论文：《Multimodal Task-Driven Dictionary Learning for Image Classiﬁcation》</p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p><strong>字典学习（Dictionary Learning）</strong>中，输入信号被<strong>字典元素（dictionary atom）</strong>的线性组合所表示。字典学习最初是用来解决单一模态的问题，但是最近的研究表明了对于多模态的输入来说，在特征层面上利用联合稀疏表征（joint sparse representation）可以达到很好的效果。这篇文章提出了一个任务导向的，也即有监督的多模态字典学习方法。在这个方法中，多模态字典和他们对应的分类器是被同时学习的。它利用了<strong>联合稀疏约束（joint sparsity constraint）</strong>来增强同构或异构数据中的联系，获得的多模态字典可以产生有识别力的<strong>隐藏特征（latent features）</strong>，可以用于二分类问题以及多分类问题。此外，这篇文章还提出了一个当前方法的扩展，使用一个 <strong>mixed joint and independent sparsity prior 约束</strong>，使得特征层面的融合变得更加灵活。这篇文章以四个应用验证了他们的方法：多模态人脸识别、多视角人脸识别、多视角动作识别和多模态生物识别。结果也证明，相比于非监督的、重构性的字典学习来说，任务导向的、有监督的学习在计算效率上更胜一筹。</p>]]>
    
    </summary>
    
      <category term="machine learning" scheme="https://sunlightsgy.github.io/tags/machine-learning/"/>
    
      <category term="papers reading" scheme="https://sunlightsgy.github.io/categories/papers-reading/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[多密钥ssh-key生成与管理]]></title>
    <link href="https://sunlightsgy.github.io/2017/04/06/%E5%A4%9A%E5%AF%86%E9%92%A5ssh-key%E7%94%9F%E6%88%90%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    <id>https://sunlightsgy.github.io/2017/04/06/多密钥ssh-key生成与管理/</id>
    <published>2017-04-06T14:58:42.000Z</published>
    <updated>2017-04-06T15:46:46.000Z</updated>
    <content type="html"><![CDATA[<p>由于 git 大文件用 http 方式难以传输，必须使用 ssh-key，而 ssh-key 又生成了好多个。最近在各种折腾 ssh，公钥私钥上花费了很多时间，现将一些问题总结如下。系统为 Mac/Linux。</p>
<h2 id="密钥的原理"><a href="#密钥的原理" class="headerlink" title="密钥的原理"></a>密钥的原理</h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。</p>
<a id="more"></a>
<p>整个ssh密码登录过程是这样的：</p>
<ol>
<li>用户向远程主机发登录请求：ssh user@远程主机</li>
<li>远程主机收到用户的登录请求，把自己的公钥发给用户。</li>
<li>用户使用这个公钥，将登录密码加密后，发送回远程主机。</li>
<li>远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</li>
</ol>
<p>在linux上，如果你是第一次登录对方主机，系统会出现下面的提示：</p>
<blockquote>
<p>$ ssh user@host </p>
<p>The authenticity of host ‘host (12.18.429.21)’ can’t be established. </p>
<p>RSA key fingerprint is 98:2e:d7:e0:de9f:ac:67:28:c2:42:2d:37:16:58:4d. </p>
<p>Are you sure you want to continue connecting (yes/no)?</p>
</blockquote>
<p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？ </p>
<p>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code>，再进行比较，就容易多了。 </p>
<p>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。 </p>
<p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。 </p>
<blockquote>
<p>Are you sure you want to continue connecting (yes/no)? yes</p>
</blockquote>
<p>系统会出现一句提示，表示host主机已经得到认可。 </p>
<blockquote>
<p>Warning: Permanently added ‘host,12.18.429.21’ (RSA) to the list of known hosts.</p>
</blockquote>
<p>然后，会要求输入密码。 </p>
<blockquote>
<p>Password: (enter password)</p>
</blockquote>
<p>如果密码正确，就可以登录了。 </p>
<p>原文：<a href="http://itindex.net/detail/48724-ssh-%E8%AE%A4%E8%AF%81-%E5%8E%9F%E7%90%86?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">http://itindex.net/detail/48724-ssh-认证-原理</a></p>
<h2 id="密钥的生成和管理"><a href="#密钥的生成和管理" class="headerlink" title="密钥的生成和管理"></a>密钥的生成和管理</h2><h3 id="密钥的生成"><a href="#密钥的生成" class="headerlink" title="密钥的生成"></a>密钥的生成</h3><p>在命令行中，键入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;$your_email&quot;</div></pre></td></tr></table></figure>
<p>会生成一对密钥，默认的情况下，私钥将放在<code>~/.ssh/id_rsa</code>，对应的公钥则为<code>~/.ssh/id_rsa.pub</code>。</p>
<p>在生成的过程中，会询问你放密钥的位置。由于每个人可能不止需要一个密钥，所以可以另存为其他名字的密钥，比如<code>path/to/your/dir/id_rsa_new</code>，此时它也将生成对应的公钥。</p>
<p>使用以下代码来查看生成的公钥</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>将公钥复制到你需要的服务器上（比如 github，gitlab 等等）</p>
<h3 id="密钥的管理"><a href="#密钥的管理" class="headerlink" title="密钥的管理"></a>密钥的管理</h3><p>如前文所说，如果我们需要多个密钥，那么在使用中，如何确定实际使用哪一个呢？</p>
<p>目前为止，ssh-key 用得最多的两个 地方，一是 git 相关服务，二是远程连接服务器。</p>
<h4 id="命令输入"><a href="#命令输入" class="headerlink" title="命令输入"></a>命令输入</h4><p>用<code>-i</code>指定私钥，<code>-p</code>指定端口，连接服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh -i path/to/your/key developer@192.168.1.237 -p 23</div><div class="line">scp -i path/to/your/key filename developer@192.168.1.237:/diskpath</div></pre></td></tr></table></figure>
<h4 id="配置-ssh-config-文件"><a href="#配置-ssh-config-文件" class="headerlink" title="配置 ~/.ssh/config 文件"></a>配置 ~/.ssh/config 文件</h4><p>由于 git 命令不能指定私钥，所以要通过 ~/.ssh/config 文件来控制。如果没有就在~/.ssh目录创建config文件，该文件用于配置私钥对应的服务器。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Host github</div><div class="line">HostName github.com</div><div class="line">User git</div><div class="line">IdentityFile ~/.ssh/id_rsa</div><div class="line"> </div><div class="line">Host tsinghua</div><div class="line">HostName tsinghua.edu.cn</div><div class="line">User git</div><div class="line">IdentityFile ~/.ssh/id_rsa_new</div></pre></td></tr></table></figure>
<p>这样，链接到 github.com 时，使用的就是 id_rsa；链接到 tsinghua.edu.cn 时，使用 id_rsa_new。另外，Host 的名字可以随便设置，并且在 ssh 后面相当于 User@HostName，比如 <code>ssh github</code> 等价于 <code>ssh git@github.com</code>。</p>
<h4 id="私钥密码修改"><a href="#私钥密码修改" class="headerlink" title="私钥密码修改"></a>私钥密码修改</h4><p>如果工作中，你使用了一个没有密码的私钥，有一天服务器被黑了，你是跳到黄河都洗不清。而生成密钥时，往往会选择一个比较简单的密码。为了安全起见，还是应该修改一下：利用<code>ssh-keygen -p</code>，系统会提示选择需要修改的私钥，默认是<code>~/.ssh/id_rsa</code>，选好文件后按回车，会提示你输入旧密码，输入好后会提示输入新密码，则修改完成。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于 git 大文件用 http 方式难以传输，必须使用 ssh-key，而 ssh-key 又生成了好多个。最近在各种折腾 ssh，公钥私钥上花费了很多时间，现将一些问题总结如下。系统为 Mac/Linux。</p>
<h2 id="密钥的原理"><a href="#密钥的原理" class="headerlink" title="密钥的原理"></a>密钥的原理</h2><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。</p>]]>
    
    </summary>
    
      <category term="git" scheme="https://sunlightsgy.github.io/tags/git/"/>
    
      <category term="engineering" scheme="https://sunlightsgy.github.io/categories/engineering/"/>
    
  </entry>
  
</feed>
